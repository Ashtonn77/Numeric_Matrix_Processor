type: edu
custom_name: stage2
files:
- name: src/processor/Main.java
  visible: true
  text: |
    package processor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.strip();
            reply = reply.strip();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = reply.lines().collect(Collectors.toList());
            List<String> answ = clue.lines().collect(Collectors.toList());

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).strip();
                String answLine = answ.get(i).strip();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Matrix.java
  visible: true
  text: "package processor;\n\nimport java.util.Scanner;\n\npublic class Matrix {\n\
    \    \n    private final String[][] grid;\n    \n    public Matrix(int row, int\
    \ col){\n        \n        this.grid = new String[row][col];\n        build(row);\n\
    \        \n    }\n    \n    private void build(int row){\n\n        Scanner in\
    \ = new Scanner(System.in);\n        for(int i = 0; i < row; i++){\n         \
    \   \n            String r = in.nextLine();\n            this.grid[i] = r.split(\"\
    \ \");\n            \n        }\n               \n    }\n    \n    public String[][]\
    \ getGrid() {\n        return grid;\n    }\n}\n"
  learner_created: true
- name: src/processor/PrintMatrix.java
  visible: true
  text: "package processor;\n\npublic class PrintMatrix {\n    \n    void print(int[][]\
    \ grid){\n\n        for(int i = 0; i < grid.length; i++){\n\n            for(int\
    \ j = 0; j < grid[0].length; j++){\n\n                System.out.print(grid[i][j]\
    \ + \" \");\n\n            }\n\n            System.out.println(\"\");\n\n    \
    \    }\n        \n    }\n    \n}\n"
  learner_created: true
- name: src/processor/InputGetter.java
  visible: true
  learner_created: true
- name: src/processor/Adder.java
  visible: true
  text: "package processor;\n\npublic class AddMatrices {\n    \n    int[][] add(String[][]\
    \ one, String[][] two){\n        \n        int[][] output = new int[one.length][one[0].length];\n\
    \        \n        for(int i = 0; i < two.length; i++){\n            \n      \
    \      for(int j = 0; j < two[0].length; j++){\n                \n           \
    \     int k = Integer.parseInt(one[i][j]) + Integer.parseInt(two[i][j]);     \
    \            \n                output[i][j] = k;\n                \n         \
    \   }\n            \n            \n        }        \n        \n        return\
    \ output;\n        \n    }\n    \n}\n"
  learner_created: true
- name: src/processor/MultiplierByConstant.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/60/stages/324/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 10 Jun 2021 12:26:00 UTC
record: 2
